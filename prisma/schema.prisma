// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Restaurant {
  id          Int      @id @default(autoincrement())
  name        String
  mainImage   String
  images      String[]
  description String
  openTime    String
  closeTime   String
  slug        String   @unique
  price       PRICE
  items       Item[]
  locationId  Int
  location    Location @relation(fields: [locationId], references: [id])
  cuisineId   Int
  cuisine     Cuisine  @relation(fields: [cuisineId], references: [id])
  reviews     Review[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id           Int        @id @default(autoincrement())
  name         String
  price        String
  description  String
  restaurantId Int
  retaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  city      String
  email     String
  phone     String
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int        @id @default(autoincrement())
  // For performance reasons we add first and last names rather than getting data using a join with User
  firstName    String
  lastName     String
  text         String
  rating       Float
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  user_id      Int
  user         User       @relation(fields: [user_id], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
