// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  mainImage   String
  images      String[]
  description String
  openTime    String
  closeTime   String
  slug        String    @unique
  price       PRICE
  items       Item[]
  locationId  Int
  location    Location  @relation(fields: [locationId], references: [id])
  cuisineId   Int
  cuisine     Cuisine   @relation(fields: [cuisineId], references: [id])
  reviews     Review[]
  Booking     Booking[]
  Table       Table[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Item {
  id           Int        @id @default(autoincrement())
  name         String
  price        String
  description  String
  restaurantId Int
  retaurant    Restaurant @relation(fields: [restaurantId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Location {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Cuisine {
  id          Int          @id @default(autoincrement())
  name        String
  restaurants Restaurant[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  city      String
  email     String   @unique
  phone     String
  password  String
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id           Int        @id @default(autoincrement())
  // For performance reasons we add first and last names rather than getting data using a join with User
  firstName    String
  lastName     String
  text         String
  rating       Float
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Booking {
  id              Int                @id @default(autoincrement())
  numberOfPeople  Int
  bookingTime     DateTime
  bookerEmail     String
  bookerPhone     String
  bookerFirstName String
  bookerLastName  String
  bookerOccasion  String
  bookerRequest   String
  restaurantId    Int
  restaurant      Restaurant         @relation(fields: [restaurantId], references: [id])
  tables          BookingsOnTables[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model Table {
  id           Int                @id @default(autoincrement())
  seats        Int
  restaurantId Int
  restaurant   Restaurant         @relation(fields: [restaurantId], references: [id])
  bookings     BookingsOnTables[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model BookingsOnTables {
  bookingId  Int
  booking    Booking  @relation(fields: [bookingId], references: [id])
  tableId    Int
  table      Table    @relation(fields: [tableId], references: [id])
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([bookingId, tableId])
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
